---
- name: Check existing install (node)
  register: node_exporter_version_check
  failed_when: false
  changed_when: false
  check_mode: false
  ansible.builtin.shell: /usr/bin/node-exporter --version 2>&1
  tags:
    - exporters
    - node

- name: Fact version change (node)
  ansible.builtin.set_fact:
    node_exporter_version_changed: "{{ node_exporter_version_check.rc != 0 or (node_exporter_version_check.stdout_lines is defined and node_exporter_version not in node_exporter_version_check.stdout_lines[0]) | bool }}"
  tags:
    - exporters
    - node

- name: Download release tarball (node)
  when:
    - node_exporter_version_changed
  ansible.builtin.unarchive:
    src: "{{ node_exporter_download }}"
    dest: /usr/local/src
    remote_src: true
    owner: root
    group: root
  tags:
    - exporters
    - node

- name: Create collector directory (node)
  ansible.builtin.file:
    path: "{{ node_exporter_collector_directory }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
    state: directory
  tags:
    - exporters
    - node

- name: Collector from url (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.url is not defined else (item.url | length > 0)
    - true if item.state is not defined else item.state == "present"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/usr/bin/node-exporter-{{ item.name }}"
    owner: root
    group: root
    mode: o=rwx,g=rx,o=rx
  tags:
    - exporters
    - node

- name: Collector from content (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.content is not defined else (item.content | length > 0)
    - true if item.state is not defined else item.state == "present"
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "/usr/bin/node-exporter-{{ item.name }}"
    owner: root
    group: root
    mode: o=rwx,g=rx,o=rx
  tags:
    - exporters
    - node

- name: Collector from template (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.src is not defined else (item.src | length > 0)
    - true if item.state is not defined else item.state == "present"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/usr/bin/node-exporter-{{ item.name }}"
    owner: root
    group: root
    mode: o=rwx,g=rx,o=rx
  tags:
    - exporters
    - node

- name: Write collector timer (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - true if item.state is not defined else item.state == "present"
  ansible.builtin.template:
    src: collector/timer.j2
    dest: "/etc/systemd/system/node-exporter-{{ item.name }}.timer"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - exporters
    - node

- name: Write collector service (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - true if item.state is not defined else item.state == "present"
  ansible.builtin.template:
    src: collector/service.j2
    dest: "/etc/systemd/system/node-exporter-{{ item.name }}.service"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - exporters
    - node

- name: Check collector timer (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  register: node_exporter_collector_timer_check
  ansible.builtin.stat:
    path: "/etc/systemd/system/node-exporter-{{ item.name }}.service"
  tags:
    - exporters
    - node

- name: Start collector timer (node)
  loop: "{{ node_exporter_collector_timer_check.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when:
    - true if item.item.state is not defined else item.item.state == "present"
    - item.stat.exists
  register: node_exporter_collector_timer_start
  ansible.builtin.systemd:
    name: "node-exporter-{{ item.item.name }}.timer"
    state: started
    daemon_reload: true
    masked: false
    enabled: true
  tags:
    - exporters
    - node

- name: Stop collector timer (node)
  loop: "{{ node_exporter_collector_timer_check.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when:
    - false if item.item.state is not defined else item.item.state == "absent"
    - not item.stat.exists
  register: node_exporter_collector_timer_stop
  ansible.builtin.systemd:
    name: "node-exporter-{{ item.item.name }}.timer"
    state: stopped
    daemon_reload: true
    masked: false
    enabled: false
  tags:
    - exporters
    - node

- name: Remove collector timer (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.state is not defined else item.state == "absent"
  ansible.builtin.file:
    path: "/etc/systemd/system/node-exporter-{{ item.name }}.timer"
    state: absent
  tags:
    - exporters
    - node

- name: Remove collector service (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.state is not defined else item.state == "absent"
  ansible.builtin.file:
    path: "/etc/systemd/system/node-exporter-{{ item.name }}.service"
    state: absent
  tags:
    - exporters
    - node

- name: Delete defined collectors (node)
  loop: "{{ node_exporter_general_collectors + node_exporter_extra_collectors }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - false if item.state is not defined else item.state == "absent"
  ansible.builtin.file:
    path: "/usr/bin/node-exporter-{{ item.name }}"
    state: absent
  tags:
    - exporters
    - node

- name: Copy exporter binary (node)
  when:
    - node_exporter_version_changed
    - not ansible_check_mode
  notify:
    - Restart node-exporter
  ansible.builtin.copy:
    src: "/usr/local/src/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
    dest: /usr/bin/node-exporter
    remote_src: true
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags:
    - exporters
    - node

- name: Write default config (node)
  notify:
    - Restart node-exporter
  ansible.builtin.template:
    src: node/default.j2
    dest: /etc/default/node-exporter
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - exporters
    - node

- name: Write service file (node)
  notify:
    - Restart node-exporter
  ansible.builtin.template:
    src: node/service.j2
    dest: /etc/systemd/system/node-exporter.service
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - exporters
    - node

- name: Start exporter service (node)
  ansible.builtin.systemd:
    name: node-exporter
    state: started
    daemon_reload: true
    masked: false
    enabled: true
  tags:
    - exporters
    - node

- name: Remove install directory (node)
  ansible.builtin.file:
    path: "/usr/local/src/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}"
    state: absent
  tags:
    - exporters
    - node

...
